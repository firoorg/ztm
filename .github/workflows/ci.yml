name: Continuous Integration
on: [push, pull_request]
env:
  DOTNET_VERSION: '2.2.108'
jobs:
  build:
    name: Build
    runs-on: windows-latest
    env:
      PUBLISH_PATH: ${{ format('{0}\build', env.GITHUB_WORKSPACE) }}
    steps:
    - name: Checkout
      uses: actions/checkout@v1
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Build
      run: dotnet build src\Ztm.sln
    - name: Unit Test
      shell: python
      run: |
        import os
        import os.path
        import re
        import subprocess

        for file in os.listdir('src'):
          if re.match(r'^.+\.Tests$', file) is None:
            continue
          subprocess.run(['dotnet', 'test', os.path.join('src', file)], check=True)
          print() # add a blank line between each project
    - name: Publish
      env:
        ZTM_MAIN_DATABASE: Host=127.0.0.1;Database=postgres;Username=postgres
      run: |
        dotnet publish -o $PUBLISH_PATH\ztm -r linux-musl-x64 -c Release src\Ztm.WebApi
        dotnet ef migrations script -o $PUBLISH_PATH\ztm\Ztm.Data.Entity.Postgres.sql -i -p src\Ztm.Data.Entity.Postgres
        dotnet publish -o $PUBLISH_PATH\e2e src\Ztm.EndToEndTests
    - name: Archive Release Artifact
      uses: actions/upload-artifact@v1
      with:
        name: release
        path: ${{ format('{0}\ztm', env.PUBLISH_PATH) }}
    - name: Archive E2E Tests Artifact
      uses: actions/upload-artifact@v1
      with:
        name: e2e
        path: ${{ format('{0}\e2e', env.PUBLISH_PATH) }}
  e2e:
    name: E2E Test
    needs: build
    runs-on: ubuntu-18.04
    env:
      DOCKER_NETWORK: ztm
      DOCKER_DB_MAIN: ztm-db-main
      DOCKER_ZCOIND: ztm-zcoind
      DOCKER_ZTM: ztm
    steps:
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    - name: Get Release Artifact
      uses: actions/download-artifact@v1
      with:
        name: release
        path: release
    - name: Get E2E Tests Artifact
      uses: actions/download-artifact@v1
      with:
        name: e2e
        path: e2e
    - name: Fixing File Permissions
      run: chmod +x release/Ztm.WebApi
    - name: Prepare Required Services
      # right now Actions does not support additional arguments for services and we don't want to
      # bring docker-compose.yml here from the previous job so we need to spawn by ourself
      run: |
        docker network create $DOCKER_NETWORK
        docker run --rm -d --name $DOCKER_DB_MAIN --network $DOCKER_NETWORK postgres:10
        docker run --rm -d --name $DOCKER_ZCOIND --network $DOCKER_NETWORK zcoinofficial/zcoind:latest -regtest -exodus -dandelion=0 -rpcuser=zcoin -rpcpassword=zcoin -rpcallowip=0.0.0.0/0 -zmqpubhashblock=tcp://0.0.0.0:28332
    - name: Configure ZTM
      shell: python
      run: |
        import json
        import os

        with open('appsettings.json') as f:
          conf = json.load(f)

        conf['Logging']['LogLevel']['Default'] = 'Information'
        conf['Database']['Main']['ConnectionString'] = 'Host={0};Database=postgres;Username=postgres'.format(os.environ['DOCKER_DB_MAIN'])
        conf['Zcoin']['Network']['Type'] = 'Regtest'
        conf['Zcoin']['Rpc']['Address'] = 'http://{0}:28888'.format(os.environ['DOCKER_ZCOIND'])
        conf['Zcoin']['ZeroMq']['Address'] = 'tcp://{0}:28332'.format(os.environ['DOCKER_ZCOIND'])

        with open('appsettings.json', 'w') as f:
          json.dump(conf, f, indent=2)
    - name: Start ZTM
      run: docker run --rm -d --name $DOCKER_ZTM --network $DOCKER_NETWORK --user=1000:1000 -v ./release:/opt/ztm:ro -w /opt/ztm -p 5000:5000 mcr.microsoft.com/dotnet/core/runtime-deps:2.2-alpine /opt/ztm/Ztm.WebApi --urls=http://*:5000
    - name: Run E2E Tests
      env:
        ZTM_HOST: localhost
        ZTM_PORT: 5000
      run: dotnet vstest e2e/Ztm.EndToEndTests.dll
